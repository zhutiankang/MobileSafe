package com.nl.mobilesafe.service;

import java.io.InputStream;

import com.nl.mobilesafe.utils.ModifyOffset;
import com.nl.mobilesafe.utils.PointDouble;

import android.app.Service;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;

public class GPSService extends Service {

	// 位置服务
	private LocationManager lm;
	private MyLocationListener listener;
	private String provider;

	@Override
	public IBinder onBind(Intent intent) {

		return null;
	}

	@Override
	public void onCreate() {
		super.onCreate();
		lm = (LocationManager) getSystemService(LOCATION_SERVICE);
		// List<String> providers = lm.getAllProviders();
		// for (String provider : providers) {
		// System.out.println("provider");3种方式，网络，gps,基站
		// }
		
		// 注册监听位置服务 gps虽然比较准，但被挡住了就无法定位
		// lm.setTestProviderEnabled("gps", true);//自动打开gps没有用处
		// lm.requestLocationUpdates("gps", 60000, 50, listener);

		// 给位置提供者设置条件,得到一个最好的内容提供者,,不再单单是gps还有基站，网络，什么最好用什么
		Criteria criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_FINE);

		// 设置参数细化：
		// criteria.setAccuracy(Criteria.ACCURACY_FINE);//设置为最大精度
		// criteria.setAltitudeRequired(false);//不要求海拔信息
		// criteria.setBearingRequired(false);//不要求方位信息
		// criteria.setCostAllowed(true);//是否允许付费
		// criteria.setPowerRequirement(Criteria.POWER_LOW);//对电量的要求

		provider = lm.getBestProvider(criteria, true);
		listener = new MyLocationListener();
		lm.requestLocationUpdates(provider, 0, 0, listener);
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		lm.removeUpdates(listener);
		// lm.setTestProviderEnabled(provider, false);
		listener = null;
	}

	class MyLocationListener implements LocationListener {

		// 当位置发生改变时，回调
		@Override
		public void onLocationChanged(Location location) {

			// 通过火星坐标处理，将位置变准确

			ModifyOffset offset;
			PointDouble pointDouble = null;
			try {
				InputStream is = getAssets().open("axisoffset.dat");
				offset = ModifyOffset.getInstance(is);
				// 把标准坐标转换成火星坐标，之后在地图上查找
				pointDouble = offset.s2c(new PointDouble(location
						.getLongitude(), location.getLatitude()));
			} catch (Exception e) {
				e.printStackTrace();
			}
			String longitude ="\nlongitude:" + pointDouble.getX() + "\n";
			String latitude = "latitude:" + pointDouble.getY() + "\n";
			String accuracy = "accuracy:" + location.getAccuracy();
//			String longitude =pointDouble.getX() + ",";
//			String latitude =pointDouble.getY() + ",";
//			String accuracy =location.getAccuracy()+"";
			// 发短信给安全号码，最后的位置

			SharedPreferences sp = getSharedPreferences("config", MODE_PRIVATE);
			Editor edit = sp.edit();
			edit.putString("lastLocation", longitude + latitude + accuracy);
			edit.commit();

		}

		// 当某一个位置提供者状态发生变化的时候 关闭--》开启 或者开启--》关闭
		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {

		}

		// 当某一位置提供者可用时回调
		@Override
		public void onProviderEnabled(String provider) {

		}

		// 当某一位置提供者不可用时回调
		@Override
		public void onProviderDisabled(String provider) {
			// TODO Auto-generated method stub

		}

	}
}
